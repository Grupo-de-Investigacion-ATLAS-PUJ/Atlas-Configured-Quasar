#ifndef __SOURCEVARIABLES_H__
#define __SOURCEVARIABLES_H__

#include <QuasarThreadPool.h>
namespace AddressSpace
{
void SourceVariables_initSourceVariablesThreadPool (unsigned int minThreads=0, unsigned int maxThreads=10, unsigned int maxJobs=1000);
void SourceVariables_destroySourceVariablesThreadPool ();
Quasar::ThreadPool* SourceVariables_getThreadPool ();
}

#ifndef BACKEND_OPEN62541

#include <iomanager.h>
#include <uathreadpool.h>
#include <uabasenodes.h>

namespace AddressSpace
{

enum ASSourceVariableJobId
{
  ASSOURCEVARIABLE_NOTHING
  {% for className in designInspector.get_names_of_all_classes() %}
    {% set class = designInspector.objectify_class(className) %}
    {% for sv in class.sourcevariable %}
      {% if sv.get('addressSpaceRead') != 'forbidden' %}
        ,ASSOURCEVARIABLE_{{className}}_READ_{{sv.get('name')}}
      {% endif %}
      {% if sv.get('addressSpaceWrite') != 'forbidden' %}
        ,ASSOURCEVARIABLE_{{className}}_WRITE_{{sv.get('name')}}
      {% endif %}
    {% endfor %}
  {% endfor %}
};

UaStatus SourceVariables_spawnIoJobRead (
  ASSourceVariableJobId jobId,
  IOManagerCallback*    callback,
  OpcUa_UInt32          hTransaction,
  OpcUa_UInt32          callbackHandle,
  const UaNode*         parentNode
  
  );
  
UaStatus SourceVariables_spawnIoJobWrite (
  ASSourceVariableJobId jobId,
  IOManagerCallback*    callback,
  OpcUa_UInt32          hTransaction,
  OpcUa_UInt32          callbackHandle,
  const UaNode*         parentNode,
  OpcUa_WriteValue*     pWriteValue
  );
  

}

#endif // BACKEND_OPEN62541


#endif // __SOURCEVARIABLES_H__
